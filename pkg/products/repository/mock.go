// Code generated by mockery v2.42.3. DO NOT EDIT.

package repository

import (
	products "github.com/Leonargo404-code/e-commerce/pkg/products"
	mock "github.com/stretchr/testify/mock"
)

// Mock is an autogenerated mock type for the Repository type
type Mock struct {
	mock.Mock
}

// Create provides a mock function with given fields: newProduct, upload
func (_m *Mock) Create(newProduct *products.Product, upload func() error) error {
	ret := _m.Called(newProduct, upload)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*products.Product, func() error) error); ok {
		r0 = rf(newProduct, upload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: filter, deleteFromBucket
func (_m *Mock) Delete(filter *products.Filter, deleteFromBucket func() error) error {
	ret := _m.Called(filter, deleteFromBucket)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*products.Filter, func() error) error); ok {
		r0 = rf(filter, deleteFromBucket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: filter
func (_m *Mock) Get(filter *products.Filter) (*products.Result, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *products.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(*products.Filter) (*products.Result, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*products.Filter) *products.Result); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(*products.Filter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMock creates a new instance of Mock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mock {
	mock := &Mock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
